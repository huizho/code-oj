给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。

candidates 中的数字可以无限制重复被选取。

说明：

    所有数字（包括 target）都是正整数。
    解集不能包含重复的组合。 

示例 1:

输入: candidates = [2,3,6,7], target = 7,
所求解集为:
[
  [7],
  [2,2,3]
]

示例 2:

输入: candidates = [2,3,5], target = 8,
所求解集为:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]

class Solution {
    List<List<Integer>> r = new ArrayList<>();
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        Arrays.sort(candidates);
        dfs(candidates,target,new ArrayList<Integer>(),0);
        return r;
    }
    private void dfs(int[] a,int k,List<Integer> list,int start) {
       if(k == 0) {
            r.add(new ArrayList<>(list));//注意
            return ;
        }
        else if(k < 0) {
            return ;
        }
        for(int i = start; i < a.length; i++) {//start为了判重
            if(a[i] > k) break; //剪枝
            list.add(a[i]);
            dfs(a,k-a[i],list,i);//通过减去每次的a[i] 
            list.remove(list.size()-1);
            
        }
    }
}
