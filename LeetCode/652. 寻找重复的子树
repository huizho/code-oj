给定一棵二叉树，返回所有重复的子树。对于同一类的重复子树，你只需要返回其中任意一棵的根结点即可。

两棵树重复是指它们具有相同的结构以及相同的结点值。

示例 1：

        1
       / \
      2   3
     /   / \
    4   2   4
       /
      4

下面是两个重复的子树：

      2
     /
    4

和

    4

因此，你需要以列表的形式返回上述重复子树的根结点。
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<TreeNode> findDuplicateSubtrees(TreeNode root) {
        List<TreeNode> res = new ArrayList<>();
        HashMap<String,Integer> map = new HashMap<>();
        if(root == null) return res;
        fun(root,res,map);
        return res;
    }//递归序列化树 map判重一次 自底向上
    private String fun(TreeNode root,List<TreeNode> res,HashMap<String,Integer> map) {
        if(root == null) return "";
        String s = root.val + "," + fun(root.left,res,map) + "," + fun(root.right,res,map);
        if(map.get(s) != null && map.get(s) == 1) {
            res.add(root);
        }
        map.put(s,map.getOrDefault(s,0)+1);
        return s;
    }
}
