这里有一幅服务器分布图，服务器的位置标识在 m * n 的整数矩阵网格 grid 中，1 表示单元格上有服务器，0 表示没有。
如果两台服务器位于同一行或者同一列，我们就认为它们之间可以进行通信。
请你统计并返回能够与至少一台其他服务器进行通信的服务器的数量。
示例 1：

输入：grid = [[1,0],[0,1]]
输出：0
解释：没有一台服务器能与其他服务器进行通信。

示例 2：

输入：grid = [[1,0],[1,1]]
输出：3
解释：所有这些服务器都至少可以与一台别的服务器进行通信。

示例 3：

输入：grid = [[1,1,0,0],[0,0,1,0],[0,0,1,0],[0,0,0,1]]
输出：4
解释：第一行的两台服务器互相通信，第三列的两台服务器互相通信，但右下角的服务器无法与其他服务器通信。

class Solution {
    public int countServers(int[][] grid) {
        int res = 0;
        for(int i = 0; i < grid.length; i++) {
            int cnt = 0;
            for(int j = 0; j < grid[0].length; j++) {
                if(grid[i][j] == 1) 
                    cnt++;
            }
            if(cnt >= 2) {
                for(int j1 = 0; j1 < grid[0].length; j1++){
                    if(grid[i][j1] == 1) {
                        for(int i1 = 0; i1 < grid.length; i1++) {
                            if(grid[i1][j1] == 1) {
                                grid[i1][j1] = 2;
                                res++;
                            }
                        }
                    }        
                }          
            }
        }
        for(int i = 0; i < grid[0].length; i++) {
            int cnt = 0;
            for(int j = 0; j < grid.length; j++) {
                if(grid[j][i] >= 1) 
                    cnt++;
            }
            if(cnt >= 2) {
                for(int j1 = 0; j1 < grid.length; j1++){
                    if(grid[j1][i] >= 1) {
                        for(int i1 = 0; i1 < grid[0].length; i1++) {
                            if(grid[j1][i1] == 1) {
                                grid[j1][i1] = 2;
                                res++;
                            }
                        }
                    }        
                }          
            }
        }
        return res;
    }
}
