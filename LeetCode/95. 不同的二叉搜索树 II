给定一个整数 n，生成所有由 1 ... n 为节点所组成的二叉搜索树。

示例:

输入: 3
输出:
[
  [1,null,3,2],
  [3,2,null,1],
  [3,1,null,null,2],
  [2,1,3],
  [1,null,2,null,3]
]
解释:
以上的输出对应以下 5 种不同结构的二叉搜索树：

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {//递归
    public LinkedList<TreeNode> generate_t(int start, int end) {
        LinkedList<TreeNode> all_t = new LinkedList<TreeNode>(); 
        if(start > end){
            all_t.add(null);
            return all_t;
        }//从中间分开，递归构建左右子树       前序遍历
        for(int i = start; i <= end; i++) { 
        LinkedList<TreeNode> L = generate_t(start,i-1);
        LinkedList<TreeNode> R = generate_t(i+1,end);
        for(TreeNode l : L) 
            for(TreeNode r : R) {
                TreeNode cur = new TreeNode(i);
                cur.right = r;
                cur.left = l;
                all_t.add(cur);
            }
        }
        return all_t;
    }
    
    public List<TreeNode> generateTrees(int n) {
        if(n == 0) {
            return new LinkedList<TreeNode>();
        }    
        return generate_t(1,n);
    }
}
