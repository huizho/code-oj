给出一个字符串 s（仅含有小写英文字母和括号）。
请你按照从括号内到外的顺序，逐层反转每对匹配括号中的字符串，并返回最终的结果。
注意，您的结果中 不应 包含任何括号。
示例 1：

输入：s = "(abcd)"
输出："dcba"

示例 2：

输入：s = "(u(love)i)"
输出："iloveu"

示例 3：

输入：s = "(ed(et(oc))el)"
输出："leetcode"

示例 4：

输入：s = "a(bcdefghijkl(mno)p)q"
输出："apmnolkjihgfedcbq"

提示：

    0 <= s.length <= 2000
    s 中只有小写英文字母和括号
    我们确保所有括号都是成对出现的

class Solution {
    /*核心思想就是栈操作，遇到左括号栈顶就压入空串，遇到右括号就反转栈顶并与栈顶第二个元素合并，
    其他情况栈顶直接累加元素，最后输出栈内唯一元素。*/
    public String reverseParentheses(String s) {
        Stack<String> st = new Stack<>();
        st.push("");
        for(int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if(c == '(') {
                st.push("");
            }
            else if(c == ')') {
                String p = st.pop();
                StringBuffer pp =  new StringBuffer(st.pop());
                for(int j = p.length()-1; j >= 0; j--) {
                    pp.append(p.charAt(j));
                }
                st.push(pp.toString());
            }
            else {
                String p = st.pop();
                p += c;
                st.push(p);
            }
        }
        return st.pop();
    }
}
