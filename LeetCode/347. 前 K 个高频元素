给定一个非空的整数数组，返回其中出现频率前 k 高的元素。

示例 1:

输入: nums = [1,1,1,2,2,3], k = 2
输出: [1,2]

示例 2:

输入: nums = [1], k = 1
输出: [1]

说明：

    你可以假设给定的 k 总是合理的，且 1 ≤ k ≤ 数组中不相同的元素的个数。
    你的算法的时间复杂度必须优于 O(n log n) , n 是数组的大小。

class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        HashMap<Integer,Integer> map = new HashMap<>();
        List<Integer> r = new ArrayList<>(); 
        for(int i : nums) {
            map.put(i,map.getOrDefault(i,0)+1);
        }
        //创建堆
        PriorityQueue<Integer> heap = new PriorityQueue<Integer>((n1, n2) -> map.get(n1) - map.get(n2));

        for(int i : map.keySet()){
            heap.add(i);
            if(heap.size() > k)
                heap.poll();
        }
        while(!heap.isEmpty()) {
            r.add(heap.poll());
        }
        Collections.reverse(r);
        return r;
    }
}
