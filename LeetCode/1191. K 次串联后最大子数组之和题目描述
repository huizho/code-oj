给你一个整数数组 arr 和一个整数 k。
首先，我们要对该数组进行修改，即把原数组 arr 重复 k 次。

    举个例子，如果 arr = [1, 2] 且 k = 3，那么修改后的数组就是 [1, 2, 1, 2, 1, 2]。

然后，请你返回修改后的数组中的最大的子数组之和。

注意，子数组长度可以是 0，在这种情况下它的总和也是 0。

由于 结果可能会很大，所以需要 模（mod） 10^9 + 7 后再返回。 

 

示例 1：

输入：arr = [1,2], k = 3
输出：9

示例 2：

输入：arr = [1,-2,1], k = 5
输出：2

示例 3：

输入：arr = [-1,-2], k = 7
输出：0

class Solution {
    /*求出arr的最大子串mid、最大前缀子串pre、最大后缀子串post、单个数组最大子串和mid<0时,直接返回0;
mid>=0时:
若sum<0,结果肯定在前两个周期. 结果为max(mid, post+pre)
若sum>0,结果为max(mid, max(post,sum)+sum*(k-2)+max(pre,sum))*/
    public int kConcatenationMaxSum(int[] arr, int k) {
    /* s, maxs = 0, 0
        for a in arr * min(2, k):
            s = a if s < 0 else s + a   #连续和
            if s > maxs: 
                maxs = s                #最大连续和
        if k <= 2: 
            return maxs                 #两个周期以内之间返回最大连续和
        return (max(sum(arr), 0) * (k - 2) + maxs) % 
                                        #否则返回可能加上的多周期和
*/
        int maxs = 0,s = 0,sum = 0;
        for(int i = 0; i < arr.length; i++) {
            s = Math.max(s,s+arr[i]);
            if(s > maxs)
                maxs = s;
            sum += arr[i]; 
        }
        if(k <= 2)
            return maxs;
        return (Math.max(sum,0)*(k-2)+maxs)%1000000007;
    }
}
