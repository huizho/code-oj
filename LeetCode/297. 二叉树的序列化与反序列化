序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，
同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据。

请设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，
你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。

示例: 

你可以将以下二叉树：

    1
   / \
  2   3
     / \
    4   5

序列化为 "[1,2,3,null,null,4,5]"

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        return dfs(root,"");
    }
    public String dfs(TreeNode r,String s) {
        if(r == null)
            s += "null,";
        else {
            s += r.val +",";//先序遍历
            s = dfs(r.left,s);
            s = dfs(r.right,s);
        }
        return s;
    }
    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        String[] ld = data.split(",");
        List<String> l = new LinkedList<String>(Arrays.asList(ld));
        return fun(l);
    }
    private TreeNode fun(List<String> l) {
        if(l.get(0).equals("null")) {
            l.remove(0);
            return null;
        }
        TreeNode r = new TreeNode(Integer.valueOf(l.get(0)));
        l.remove(0);
        r.left = fun(l);
        r.right = fun(l);
        return r;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));
