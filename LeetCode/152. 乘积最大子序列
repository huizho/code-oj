给定一个整数数组 nums ，找出一个序列中乘积最大的连续子序列（该序列至少包含一个数）。

示例 1:

输入: [2,3,-2,4]
输出: 6
解释: 子数组 [2,3] 有最大乘积 6。

示例 2:

输入: [-2,0,-1]
输出: 0
解释: 结果不能为 2, 因为 [-2,-1] 不是子数组。

class Solution {//dp 由于存在负数，那么会导致最大的变最小的，最小的变最大的。
    public int maxProduct(int[] nums) {
        int max = Integer.MIN_VALUE,maxi = 1,mini = 1;
        for(int i = 0; i < nums.length; i++) {
            if(nums[i] < 0) {
                int t = maxi;
                maxi = mini;
                mini = t;
            }
            maxi = Math.max(maxi*nums[i],nums[i]);//代表i为终点的最大乘积子序列的值
            mini = Math.min(mini*nums[i],nums[i]);
            max = Math.max(max,maxi);
        }
        return max;
    }
}
