给你 root1 和 root2 这两棵二叉搜索树。

请你返回一个列表，其中包含 两棵树 中的所有整数并按 升序 排序。.

示例 1：

输入：root1 = [2,1,4], root2 = [1,0,3]
输出：[0,1,1,2,3,4]

示例 2：

输入：root1 = [0,-10,10], root2 = [5,1,7,0,2]
输出：[-10,0,0,1,2,5,7,10]

示例 3：

输入：root1 = [], root2 = [5,1,7,0,2]
输出：[0,1,2,5,7]

示例 4：

输入：root1 = [0,-10,10], root2 = []
输出：[-10,0,10]

示例 5：

输入：root1 = [1,null,8], root2 = [8,1]
输出：[1,1,8,8]

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    List<Integer> l1 = new ArrayList<>();
    List<Integer> l2 = new ArrayList<>();//二叉树前序遍历为升序序列   循环添加
    public List<Integer> getAllElements(TreeNode root1, TreeNode root2) {
        inder(root1,l1);
        inder(root2,l2);
        List<Integer> list = new ArrayList<>();
        int n1 = l1.size(),n2 = l2.size(),i = 0,j = 0;
        while(i < n1 && j < n2) {
            if(l1.get(i) < l2.get(j))
                list.add(l1.get(i++));
            else 
                list.add(l2.get(j++));
        }
        while(i < n1) 
            list.add(l1.get(i++));
        while(j < n2) 
            list.add(l2.get(j++));
        return list;
    }
    private void inder(TreeNode root,List<Integer> l) {
        if(root == null) return;
        inder(root.left,l);
        l.add(root.val);
        inder(root.right,l);
    }
}
