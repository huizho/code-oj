给定一个包含 m x n 个元素的矩阵（m 行, n 列），请按照顺时针螺旋顺序，返回矩阵中的所有元素。

示例 1:

输入:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
输出: [1,2,3,6,9,8,7,4,5]

示例 2:

输入:
[
  [1, 2, 3, 4],
  [5, 6, 7, 8],
  [9,10,11,12]
]
输出: [1,2,3,4,8,12,11,10,9,5,6,7]

class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List r = new ArrayList<>();
        if(matrix.length == 0) 
            return r;
        int i = 0,j = 0,d = 0;
        int iNum = matrix.length;//竖轴
        int jNum = matrix[0].length;
        int[] di = {0,1,0,-1};//左 下 右 上
        int[] dj = {1,0,-1,0};
        boolean[][] vis = new boolean[iNum][jNum];
        for(int k = 0; k < iNum*jNum; k++) {
            r.add(matrix[i][j]);
            vis[i][j] = true;
            int i1 = i + di[d];
            int j1 = j + dj[d];
            //不超边界 没访问过
            if(i1 >= 0 && i1 < iNum && j1 >= 0 && j1 < jNum && !vis[i1][j1]) {
                i = i1;
                j = j1;
            }else {//转向
                d = (d+1)%4;
                i += di[d];
                j += dj[d];
            }
        }
        return r;
    }
}
