给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。

你的算法时间复杂度必须是 O(log n) 级别。

如果数组中不存在目标值，返回 [-1, -1]。

示例 1:

输入: nums = [5,7,7,8,8,10], target = 8
输出: [3,4]

示例 2:

输入: nums = [5,7,7,8,8,10], target = 6
输出: [-1,-1]

class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] a = new int[]{-1,-1};
   
        int i = search(nums,target,true);
        if(i == nums.length || nums[i] != target) 
            return a;
        a[0] = i;
        a[1] = search(nums,target,false)-1;
        return a;
    }
    private int search(int[] nums,int t,boolean left) {
        int i = 0,j = nums.length;
        while(i < j) {
            int m = (j + i)/2;    //二分搜索
            if(nums[m] > t || (left && t == nums[m])) {
                j = m;
            }
            else 
                i = m+1;
        }
        return i;
    }
}
