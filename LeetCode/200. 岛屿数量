给定一个由 '1'（陆地）和 '0'（水）组成的的二维网格，计算岛屿的数量。
一个岛被水包围，并且它是通过水平方向或垂直方向上相邻的陆地连接而成的。
你可以假设网格的四个边均被水包围。

示例 1:

输入:
11110
11010
11000
00000

输出: 1

示例 2:

输入:
11000
11000
00100
00011

输出: 3

class Solution {
    private int[][] dir = {{0,1},{0,-1},{1,0},{-1,0}};
    private void dfs(char[][] g ,int i, int j) {
        g[i][j] = 0;//标价计算过
        for(int[] d : dir) {//边界
            if(i+d[0] >= 0&&i+d[0] < g.length&&j+d[1] >= 0 && j+d[1] < g[0].length&&g[i+d[0]][j+d[1]] == '1' ) {                
                dfs(g,i+d[0],j+d[1]);
            }
        }
    }
    public int numIslands(char[][] grid) {        
        int cnt = 0;
        for(int i = 0; i < grid.length; i++)
            for(int j = 0; j < grid[0].length; j++) {
                if(grid[i][j] == '1') {
                    cnt++;
                    dfs(grid,i,j);   
            }
                   
    }return cnt; 
    } 
}
